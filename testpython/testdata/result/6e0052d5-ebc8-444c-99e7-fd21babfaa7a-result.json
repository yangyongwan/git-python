{"name": "test_login[case10]", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\venv\\Lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\njson\\__init__.py:346: in loads\n    ???\njson\\decoder.py:337: in decode\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020777446FD0>, s = '', idx = 0\n\n>   ???\nE   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\njson\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_ddt2.TestDdt object at 0x000002077A348C90>\ncase1 = {'case_id': 1, 'data': '(\"J/fY3PE2HH0kvMZzbv5BLQ==\",\"ez27Us6DpzGoPNkb3FH/Mw==\",\"6666\",\"$2y$10$reArgS92v9zKSj.Z77yls.nqw0mxi1gVyEVzu.eYv9vT6/2DS8Z9q\",\"username\")', 'expected': '{\"code\": 1, \"msg\": \"登录成功\"}', 'title': '输入正确的账号密码'}\n\n    @pytest.mark.parametrize('case1',cases)\n    def test_login(self,case1):\n        case_data = eval(case1['data'])\n        expected = eval(case1['expected'])\n        case_id = case1[\"case_id\"]\n        result_json = login_check(*case_data)\n        response = http.send_requests(url=url1,json=result_json,method='post',header=header)\n        http.send_requests(url=url2,method='get')\n>       result = response.json()\n\ntest_ddt2.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\venv\\Lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "parameters": [{"name": "case1", "value": "{'case_id': 1, 'title': '输入正确的账号密码', 'data': '(\"J/fY3PE2HH0kvMZzbv5BLQ==\",\"ez27Us6DpzGoPNkb3FH/Mw==\",\"6666\",\"$2y$10$reArgS92v9zKSj.Z77yls.nqw0mxi1gVyEVzu.eYv9vT6/2DS8Z9q\",\"username\")', 'expected': '{\"code\": 1, \"msg\": \"登录成功\"}'}"}], "start": 1714393820344, "stop": 1714393826663, "uuid": "03e27972-22f9-47e1-8858-9ac23989aaa0", "historyId": "a5627c352e6234b582e6cd1cb8e0d20a", "testCaseId": "ee3b72303bf8fc3659dea4eab1f6b87e", "fullName": "test_ddt2.TestDdt#test_login", "labels": [{"name": "suite", "value": "test_ddt2"}, {"name": "subSuite", "value": "TestDdt"}, {"name": "host", "value": "LAPTOP-Q5VMTL8G"}, {"name": "thread", "value": "25284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ddt2"}]}